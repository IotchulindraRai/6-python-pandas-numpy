import numpy as np
a = np.array([10, 20, 30, 40, 50, 60])
print(a)
[10 20 30 40 50 60]
print(type(a))
<class 'numpy.ndarray'>
a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11,12]])
print(a)
[[ 1  2  3  4]
 [ 5  6  7  8]
 [ 9 10 11 12]]
#To create an array filled with 0’s:  
print(np.zeros(10))
[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
#To create an array filled with 1’s:
print(np.ones(5))
[1. 1. 1. 1. 1.]
#To create an array with a range of elements:
print(np.arange(4))
[0 1 2 3]
#To create an array that contains a range of evenly spaced intervals. 
#To do this, you will specify the first number, last number, and the step size.
print(np.arange(5,30,5))
[ 5 10 15 20 25]
#Specifying your data type
#By default data type is floating point (np.float64),
#We can explicitly specify which data type we want using the dtype keyword.
x=np.ones(5)
print(x)
print(x.dtype)
[1. 1. 1. 1. 1.]
float64
x=np.ones(5,dtype=np.int64)
print(x.dtype)
int64
#For axis=0, this means that we apply a function along each “column”, or all values that occur vertically.

#For axis=1, this means that we apply a function along each “row”, or all values horizontally.

x=np.array([[1,2,3,4],[5,6,7,8]])
print(x)
[[1 2 3 4]
 [5 6 7 8]]
print(np.sum(x,axis=0))
[ 6  8 10 12]
print(np.sum(x,axis=1))
[10 26]
print(np.mean(x, axis=0)) 
[3. 4. 5. 6.]
print(np.mean(x, axis=1)) 
[2.5 6.5]
print(np.mean(x)) 
4.5
Sorting numpy array elements
a=np.array([10,5,6,8,2])
print(a)
print(id(a))
s=np.sort(a)
print(id(s))
print(s)
print(a)
[10  5  6  8  2]
1877638243712
1877638245072
[ 2  5  6  8 10]
[10  5  6  8  2]
#In Numpy, the np.sort() function does not allow us to sort an array in 
#descending order. Instead, we can reverse an array utilizing list slicing in 
#Python, after it has been sorted in ascending order(By default quicksort).
s1 = np.sort(a)
print(s1)
[ 2  5  6  8 10]
s2 = s1[::-1]
print(s2)
[10  8  6  5  2]
print(s1)
[ 2  5  6  8 10]
print(s2)
[10  8  6  5  2]
#Concatenating numpy arrays
a = np.array([1, 2, 3, 4])
b = np.array([5, 6, 7, 8])
print(a)
print(b)
[1 2 3 4]
[5 6 7 8]
np.concatenate((a, b))
array([1, 2, 3, 4, 5, 6, 7, 8])
print(np.concatenate((a, b)))
[1 2 3 4 5 6 7 8]
print(np.concatenate((b, a)))
[5 6 7 8 1 2 3 4]
a = np.array([1, 2, 3, 4])
b = np.array([5, 6, 7, 8])
c = np.array([9,10,11,12])
print(np.concatenate((a, b, c)))
[ 1  2  3  4  5  6  7  8  9 10 11 12]
x = np.array([[1, 2], [3, 4]])
y = np.array([[5, 6], [7, 8]])
print(x)
print(y)
[[1 2]
 [3 4]]
[[5 6]
 [7 8]]
x1=np.concatenate((x, y))
print(x1)
[[1 2]
 [3 4]
 [5 6]
 [7 8]]
x1=np.concatenate((x, y),axis=0)
print(x1)
[[1 2]
 [3 4]
 [5 6]
 [7 8]]
x2=np.concatenate((x, y),axis=1)
print(x2)
[[1 2 5 6]
 [3 4 7 8]]
#ndarray.ndim will tell you the number of axes, or dimensions, of the array.

#ndarray.size will tell you the total number of elements of the array.
#This is the product of the elements of the array’s shape.

#ndarray.shape will display a tuple of integers that indicate the number of 
#elements stored along each dimension of the array. If, for example, 
#you have a 2-D array with 2 rows and 3 columns, the shape of your array is (2, 3).
print(x)
print(x.ndim)
print(x.size)
print(x.shape)
[[1 2]
 [3 4]]
2
4
(2, 2)
print(x1)
print(x1.ndim)
print(x1.size)
print(x1.shape)
[[1 2]
 [3 4]
 [5 6]
 [7 8]]
2
8
(4, 2)
print(x2)
print(x2.ndim)
print(x2.size)
print(x2.shape)
[[1 2 5 6]
 [3 4 7 8]]
2
8
(2, 4)
n=np.array([1,2,3])
print(n.ndim)
print(n.shape)
1
(3,)
n1=np.array([[[1,2,3],[4,5,6],[7,8,9]]])
print(n1.ndim)
3
print(n1)
[[[1 2 3]
  [4 5 6]
  [7 8 9]]]
Reshaping numpy array
#Using arr.reshape() will give a new shape to an array without changing the data.
#Just remember that when you use the reshape method, the array you want to 
#produce needs to have the same number of elements as the original array. 
#If you start with an array with 10 elements, you’ll need to make sure that your
#new array also has a total of 10 elements.
a = np.arange(12)
print(a)
[ 0  1  2  3  4  5  6  7  8  9 10 11]
a1=a.reshape(3,4)
print(a1)
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]
a2=a.reshape(2,6)
print(a2)
[[ 0  1  2  3  4  5]
 [ 6  7  8  9 10 11]]
a3=a.reshape(6,2)
print(a3)
[[ 0  1]
 [ 2  3]
 [ 4  5]
 [ 6  7]
 [ 8  9]
 [10 11]]
Basic array operations
a=np.array([[1,2,3,4]])
print(a)
[[1 2 3 4]]
print(a.sum())
10
print(a.min())
1
print(a.max())
4
a=np.array([[1,2],[3,4]])
print(a)
[[1 2]
 [3 4]]
print(a.sum())
print("Column sum")
print(a.sum(axis=0))
print("Row sum")
print(a.sum(axis=1))
10
Column sum
[4 6]
Row sum
[3 7]
print(a)
print(a.min(axis=0))
print(a.min(axis=1))
[[1 2 3 4]]
[1 2 3 4]
[1]
print(a.max(axis=0))
print(a.max(axis=1))
[3 4]
[2 4]
#Indexing and slicing operations are useful when you’re manipulating matrices:
a=np.array([[1,2,3],[4,5,6]])
print(a)
[[1 2 3]
 [4 5 6]]
print(a[0,0])
print(a[0,1])
print(a[1,0])
1
2
4
print(a[0:])
[[1 2 3]
 [4 5 6]]
print(a[1:])
[[4 5 6]]
print(a[0:2,1:2])
[[2]
 [5]]
Reversing an array
#NumPy’s np.flip() function allows you to flip, or reverse, the contents of an 
#array along an axis. When using np.flip, specify the array you would like to 
#reverse and the axis. If you don’t specify the axis, NumPy will reverse the 
#contents along all of the axes of your input array.

a=np.array([1,2,3,4,5,6])
print(a)
[1 2 3 4 5 6]
print(np.flip(a,axis=0))
[6 5 4 3 2 1]
#2D array
x=np.array([[1,2,3],[4,5,6]])
print(x)
[[1 2 3]
 [4 5 6]]
#Column-wise flip
print(np.flip(x,axis=0))
[[4 5 6]
 [1 2 3]]
print(x)
#Row-wise flip
print(np.flip(x,axis=1))
[[1 2 3]
 [4 5 6]]
[[3 2 1]
 [6 5 4]]
a=np.array([[1,2],[3,4]])
b=np.array([[1,2],[3,4]])
print(a)
print(b)
[[1 2]
 [3 4]]
[[1 2]
 [3 4]]
c=a+b
print(c)
[[2 4]
 [6 8]]
d=a*b
print(d)
[[ 1  4]
 [ 9 16]]
e=a.dot(b)
print(e)
[[ 7 10]
 [15 22]]
import numpy as np
a=np.array([[1,2,3,4,5],[10,11,12,14,15]])
print(a)
[[ 1  2  3  4  5]
 [10 11 12 14 15]]
print(a[0,1])
2
print(a[:,1])
[ 2 11]
6a.Write a Pandas program to create and display a DataFrame from a specified dictionary data which has the index labels.
#6a Write a Pandas program to create and display a DataFrame from 
#a specified dictionary data which has the index labels.
import pandas as pd
Student_data  = {'Name': ['Sachin', 'Russel', 'Akshar', 'Rohith', 'Mandhana', 'Williams', 'Lara', 'Saurav', 'Chetan', 'Deepthi'],
        'USN': ["18BTR101", "18BTR111", "18BTR121", "18BTR102", "18BTR112", "18BTR132", "18BTR154", "18BTR201", "18BTR212", "18BTR143"],
        'Marks': [90, 93, 92, 83, 92, 94, 91, 94, 92, 96],
        'Program': ['B.Tech', 'M.Tech', 'B.Tech', 'M.Tech', 'B.Tech', 'M.Tech', 'M.Tech', 'B.Tech', 'M.Tech', 'M.Tech']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

df = pd.DataFrame(Student_data,index=labels)
print(df)
       Name       USN  Marks Program
a    Sachin  18BTR101     90  B.Tech
b    Russel  18BTR111     93  M.Tech
c    Akshar  18BTR121     92  B.Tech
d    Rohith  18BTR102     83  M.Tech
e  Mandhana  18BTR112     92  B.Tech
f  Williams  18BTR132     94  M.Tech
g      Lara  18BTR154     91  M.Tech
h    Saurav  18BTR201     94  B.Tech
i    Chetan  18BTR212     92  M.Tech
j   Deepthi  18BTR143     96  M.Tech
#6b. Create a 4X2 integer array and Prints its attributes
import numpy as np

arr1 = np.empty([4,2],dtype=np.int64) 
print("-------------------------------------")
print("Printing Array(empty array)")
print(arr1)
print("-------------------------------------")
-------------------------------------
Printing Array(empty array)
[[4995126780039155539 8030885097616526684]
 [8390339637454599270 6663471955551872879]
 [8319393663061222724 7306080452898607196]
 [6661779807557394546 3544385822439536980]]
-------------------------------------
arr2 = np.zeros([4,2],dtype=np.int64) 
print("Printing Array(zero filled)")
print("-------------------------------------")
print(arr2)
print("-------------------------------------")
Printing Array(zero filled)
-------------------------------------
[[0 0]
 [0 0]
 [0 0]
 [0 0]]
-------------------------------------
arr4 = np.array([[10,20],[30,40],[50,60],[70,80]],dtype=np.int16) 
print("Printing Array")
print("-------------------------------------")
print(arr4)
print("-------------------------------------")
Printing Array
-------------------------------------
[[10 20]
 [30 40]
 [50 60]
 [70 80]]
-------------------------------------
print("Printing Numpy Array Attributes")
print("Array Shape is: ", arr4.shape)
print("Array dimensions are: ", arr4.ndim)
print("Length of each element of array in bytes is: ", arr4.itemsize)
print("Total number of elements: ", arr4.size)
Printing Numpy Array Attributes
Array Shape is:  (4, 2)
Array dimensions are:  2
Length of each element of array in bytes is:  2
Total number of elements:  8
#Create a 4X2 integer array and Prints its attributes
import numpy as np

arr1 = np.empty([4,2],dtype=np.int64) 
print("Printing Array(empty array)")
print(arr1)
print("-------------------------------------")

arr2 = np.zeros([4,2],dtype=np.int64) 
print("Printing Array(zero filled)")
print(arr2)
print("-------------------------------------")

arr3 = np.ones([4,2],dtype=np.int64) 
print("Printing Array(one filled)")
print(arr3)
print("-------------------------------------")

arr4 = np.array([[1,2],[3,4],[5,6],[7,8]],dtype=np.int64) 
print("Printing Array")
print(arr4)
print("-------------------------------------")

print("Printing Numpy Array Attributes")
print("Array Shape is: ", arr4.shape)
print("Array dimensions are: ", arr4.ndim)
print("Length of each element of array in bytes is: ", arr4.itemsize)
print("Total number of elements: ", arr4.size)


#ndarray.ndim will tell you the number of axes, or dimensions, of the array.

#ndarray.size will tell you the total number of elements of the array.
#This is the product of the elements of the array’s shape.

#ndarray.shape will display a tuple of integers that indicate the number of 
#elements stored along each dimension of the array. If, for example, 
#you have a 2-D array with 2 rows and 3 columns, the shape of your array is (2, 3).
Printing Array(empty array)
[[          0           0]
 [          0           0]
 [          0        1756]
 [          0 30064771072]]
-------------------------------------
Printing Array(zero filled)
[[0 0]
 [0 0]
 [0 0]
 [0 0]]
-------------------------------------
Printing Array(one filled)
[[1 1]
 [1 1]
 [1 1]
 [1 1]]
-------------------------------------
Printing Array
[[1 2]
 [3 4]
 [5 6]
 [7 8]]
-------------------------------------
Printing Numpy Array Attributes
Array Shape is:  (4, 2)
Array dimensions are:  2
Length of each element of array in bytes is:  8
Total number of elements:  8
import numpy as np
arr = np.array([[ 1,  2,  3,  4,  5],
                   [ 6,  7,  8,  9, 10],
                   [11, 12, 13, 14, 15],
                   [16, 17, 18, 19, 20],
                   [21, 22, 23, 24, 25],
                   [26, 27, 28, 29, 30]])
print("\n Given array is:\n")
print(arr)
 Given array is:

[[ 1  2  3  4  5]
 [ 6  7  8  9 10]
 [11 12 13 14 15]
 [16 17 18 19 20]
 [21 22 23 24 25]
 [26 27 28 29 30]]
#To get every odd rows 
print(arr[::2])
[[ 1  2  3  4  5]
 [11 12 13 14 15]
 [21 22 23 24 25]]
#To get every even columns 
print(arr[:, 1::2])
[[ 2  4]
 [ 7  9]
 [12 14]
 [17 19]
 [22 24]
 [27 29]]
print("\n Given array is:\n")
print(arr)

print("\n Printing array of odd rows and even columns")
print(arr[::2, 1::2])
 Given array is:

[[ 1  2  3  4  5]
 [ 6  7  8  9 10]
 [11 12 13 14 15]
 [16 17 18 19 20]
 [21 22 23 24 25]
 [26 27 28 29 30]]

 Printing array of odd rows and even columns
[[ 2  4]
 [12 14]
 [22 24]]
print(arr[2,:])
[11 12 13 14 15]
#6d
#Add the following two NumPy arrays and Modify a result array by calculating the square of each element
a = np.array([[1,2,3], [4,5,6],[7,8,9]])
b = np.array([[1,2,3], [4,5,6],[7,8,9]])
print(a)
print(b)

c= a + b
print("Addition of two arrays is(using +) \n")
print(c)

d=np.add(a,b)
print("\nAddition of two arrays is(using add()) \n")
print(d)


s=np.sqrt(d)
print("\nSquare root of each element of matrix \n")
print(s)
[[1 2 3]
 [4 5 6]
 [7 8 9]]
[[1 2 3]
 [4 5 6]
 [7 8 9]]
Addition of two arrays is(using +) 

[[ 2  4  6]
 [ 8 10 12]
 [14 16 18]]

Addition of two arrays is(using add()) 

[[ 2  4  6]
 [ 8 10 12]
 [14 16 18]]

Square root of each element of matrix 

[[1.41421356 2.         2.44948974]
 [2.82842712 3.16227766 3.46410162]
 [3.74165739 4.         4.24264069]]
import numpy as np
arr = np.array([[ 1,  2,  3,  4,  5],
                   [ 6,  7,  8,  9, 10],
                   [11, 12, 13, 14, 15],
                   [16, 17, 18, 19, 20],
                   [21, 22, 23, 24, 25],
                   [26, 27, 28, 29, 30]])
print("\n Given array is:\n")
print(arr)

print("\n Odd rows of array is:\n")
for i in range(arr.shape[0]):
    if i %2 == 0:
        print(arr[i,:])
        
print("\n Even rows of array is:\n")
for i in range(arr.shape[0]):
    if i %2 != 0:
        print(arr[i,:])

print("\n Even Columns of array is:\n")
for i in range(arr.shape[1]):
    if i %2 == 1:
        print(arr[:,i])
        
        
print("\n Odd Columns of array is:\n")
for i in range(arr.shape[1]):
    if i %2 != 1:
        print(arr[:,i])
 Given array is:

[[ 1  2  3  4  5]
 [ 6  7  8  9 10]
 [11 12 13 14 15]
 [16 17 18 19 20]
 [21 22 23 24 25]
 [26 27 28 29 30]]

 Odd rows of array is:

[1 2 3 4 5]
[11 12 13 14 15]
[21 22 23 24 25]

 Even rows of array is:

[ 6  7  8  9 10]
[16 17 18 19 20]
[26 27 28 29 30]

 Even Columns of array is:

[ 2  7 12 17 22 27]
[ 4  9 14 19 24 29]

 Odd Columns of array is:

[ 1  6 11 16 21 26]
[ 3  8 13 18 23 28]
[ 5 10 15 20 25 30]
#c.For the given numpy array return array of odd rows and even columns.
import numpy as np
arr = np.array([[ 1,  2,  3,  4,  5],
                   [ 6,  7,  8,  9, 10],
                   [11, 12, 13, 14, 15],
                   [16, 17, 18, 19, 20],
                   [21, 22, 23, 24, 25],
                   [26, 27, 28, 29, 30]])
print("\n Given array is:\n")
print(arr)
 Given array is:

[[ 1  2  3  4  5]
 [ 6  7  8  9 10]
 [11 12 13 14 15]
 [16 17 18 19 20]
 [21 22 23 24 25]
 [26 27 28 29 30]]
rows=arr[:3,:]    # first row
print(rows)
[[ 1  2  3  4  5]
 [ 6  7  8  9 10]
 [11 12 13 14 15]]
odd_rows=arr[::2,:]    #odd rows
print(odd_rows)
[[ 1  2  3  4  5]
 [11 12 13 14 15]
 [21 22 23 24 25]]
odd_rows=arr[1::2,:]    #odd rows
print(odd_rows)
[[ 1  2  3  4  5]
 [11 12 13 14 15]
 [21 22 23 24 25]]
cols=arr[:,:1]    #first column
print(cols)
[[ 1]
 [ 6]
 [11]
 [16]
 [21]
 [26]]
cols=arr[:,::2]    #odd column
print(cols)
[[ 1  3  5]
 [ 6  8 10]
 [11 13 15]
 [16 18 20]
 [21 23 25]
 [26 28 30]]
rows=arr[:,:]   #even rows
print(rows)
[[ 1  2  3  4  5]
 [ 6  7  8  9 10]
 [11 12 13 14 15]
 [16 17 18 19 20]
 [21 22 23 24 25]
 [26 27 28 29 30]]
case2=arr[1::2,:]   #even rows
print(case2)
[[ 6  7  8  9 10]
 [16 17 18 19 20]
 [26 27 28 29 30]]